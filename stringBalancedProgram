A string is balanced if it consists of exactly two different characters and both of those characters appear exactly the same number of times. For example: "aabbab" is balanced (both 'a' and 'b' occur three times) but "aabba" is not balanced ('a' occurs three times, 'b' occurs two times). String "aabbcc" is also not balanced (it contains three different letters).A substring of string S is a string that consists of consecutive letters in S. For example: "ompu" is a substring of "computer" but "cmptr" is not.Write a function solution called getBalancedSubstrings(List<String> S) that, given a string S, returns an array of the longest balanced substring of S.Examples:
1. Given S = "cabbacc", the function should return ["abba"] because it is the longest balanced substring.
2. Given S = "abababa", the function should return ["ababab", "bababa"] which are the longest balanced substrings.
3. Given S = "aaaaaaa", the function should return [] since S does not contain a balanced substring.Write an efficient algorithm for the following assumptions:
 - N is an integer within the range [1..100,000];
 - string S is made only of lowercase letters (aâˆ’z).


function isBalanced(x) {
  // It will count the frequency of each character in the string
  const charCount = new Map();
  for (let char of x) {
    charCount.set(char, (charCount.get(char) || 0) + 1);
  }

  //It will Check if there are exactly two different characters with the same frequency
  if (charCount.size !== 2) {
    return false;
  }

  const frequencies = Array.from(charCount.values());
  return frequencies[0] === frequencies[1];
}

function getBalancedSubstrings(S) {
  let maxLen = 0;
  let maxSubstrings = [];

  for (let i = 0; i < S.length; i++) {
    for (let j = i + 2; j <= S.length; j++) {
      const substring = S.substring(i, j);

      if (isBalanced(substring) && substring.length >= maxLen) {
        if (substring.length > maxLen) {
          maxSubstrings = [substring];
          maxLen = substring.length;
        } else {
          maxSubstrings.push(substring);
        }
      }
    }
  }

  return maxSubstrings;
}

// Usage here
const S1 = "cabbacccc";
console.log(getBalancedSubstrings(S1)); // Output: ["abba"]

const S2 = "abababa";
console.log(getBalancedSubstrings(S2)); // Output: ["ababab", "bababa"]

const S3 = "aaaaaaa";
console.log(getBalancedSubstrings(S3)); // Output: []
